{"version":3,"file":"io.greenscreens.ipp.min.js","sources":["../modules/Utils.mjs","../modules/BaseView.mjs","../modules/IPPAttributes.mjs","../modules/IPPJobs.mjs","../modules/IPPView.mjs","../modules/IPPConsole.mjs","../modules/index.mjs"],"sourcesContent":["/*\r\n * Copyright (C) 2015, 2022 Green Screens Ltd.\r\n */\r\n\r\nimport { GSComponents } from '/webcomponents/release/esm/io.greenscreens.components.all.esm.min.js';\r\n\r\n/**\r\n * A module loading Utils class\r\n * @module Utils\r\n */\r\n\r\n/**\r\n * Helper class with shared utility functions\r\n * @class\r\n */\r\nexport default class Utils {\r\n\r\n    static get notify() {\r\n        return GSComponents.get('notification');\r\n    }\r\n\r\n    /**\r\n     * Used by inherited dialogs to show notification on remote data fetch\r\n     * \r\n     * @param {boolean} success Status message info/danger\r\n     * @param {string} msg Message t oshow\r\n     * @returns {boolean}\r\n     */\r\n    static inform(success = false, msg) {\r\n        if (!Utils.notify) return;\r\n        if (success) return Utils.notify.info('Info', msg);\r\n        Utils.notify.danger('Error', msg);\r\n        return success;\r\n    }\r\n\r\n    static handleError(e) {\r\n        console.log(e);\r\n        const msg = e.data?.error || e.msg || e.message || e.toString();\r\n        Utils.inform(false, msg);\r\n        return msg;\r\n    }\r\n\r\n    static async load(url = '') {\r\n        const res = await fetch(url);\r\n        return await res.json();\r\n    }\r\n}","/*\r\n* Copyright (C) 2015, 2023 Green Screens Ltd.\r\n*/\r\n\r\n/**\r\n * A BaseView class used by all other views\r\n * @module ipp/BaseView\r\n */\r\nimport { GSUtil, GSFunction, GSElement } from '/webcomponents/release/esm/io.greenscreens.components.all.esm.min.js';\r\nimport Utils from './Utils.mjs';\r\n\r\nexport default class BaseView extends GSElement {\r\n\r\n    onReady() {\r\n        super.onReady();\r\n        const me = this;\r\n        me.on('action', me.#onAction.bind(me));\r\n    }\r\n\r\n    async #onAction(e) {\r\n        const me = this;\r\n        if (!e.detail.action) return;\r\n        try {\r\n            const action = GSUtil.capitalizeAttr(e.detail.action);\r\n            const fn = me[action];\r\n            if (GSFunction.isFunction(fn)) {\r\n                if (GSFunction.isFunctionAsync(fn)) {\r\n                    await me[action](e);\r\n                } else {\r\n                    me[action](e);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            Utils.handleError(e);\r\n        }\r\n    }\r\n\r\n}","/*\r\n* Copyright (C) 2015, 2023 Green Screens Ltd.\r\n*/\r\n\r\n/**\r\n * A module loading IPPPrinterAttributes class\r\n * \r\n * @module ipp/IPPPrinterAttributes\r\n */\r\nimport { GSElement } from '/webcomponents/release/esm/io.greenscreens.components.all.esm.min.js';\r\n\r\n/**\r\n * IPPPrinterAttributes UI lists printer attributes\r\n */\r\nexport default class IPPAttributes extends GSElement {\r\n\r\n    static {\r\n        customElements.define('gs-ipp-attributes', IPPAttributes);\r\n        Object.seal(IPPAttributes);\r\n    }\r\n\r\n    async getTemplate() {\r\n        return super.getTemplate('//ipp-printer-attributes.html');\r\n    }\r\n\r\n    onReady() {\r\n        super.onReady();\r\n        const me = this;\r\n    }\r\n\r\n    load(data) {\r\n        if (!data) return;\r\n        data = data['printer-attributes'] ||data;\r\n        const list = Object.entries(data).map(t => { return {key: t[0], value : t[1]} } );\r\n        this.#store.setData(list);\r\n    }\r\n\r\n    get #table() {\r\n        return this.query('gs-table');\r\n    }\r\n\r\n    get #store() {\r\n        return this.#table.store;\r\n    }\r\n}","/*\r\n* Copyright (C) 2015, 2023 Green Screens Ltd.\r\n*/\r\n\r\n/**\r\n * A module loading IPPJobs class\r\n * \r\n * @module ipp/IPPJobs\r\n */\r\nimport Utils from './Utils.mjs';\r\nimport BaseView from './BaseView.mjs';\r\n\r\n/**\r\n * IPPJobs UI lists printer jobs and allows job manupulation actions\r\n */\r\nexport default class IPPJobs extends BaseView {\r\n\r\n    static {\r\n        customElements.define('gs-ipp-jobs', IPPJobs);\r\n        Object.seal(IPPJobs);\r\n    }\r\n\r\n    async getTemplate() {\r\n        return super.getTemplate('//ipp-jobs.html');\r\n    }\r\n\r\n    load(data) {\r\n        if (!data) return;\r\n        const me = this;\r\n        me.#attrStore.clear();\r\n        if (data.jobs) {\r\n            me.#jobsStore.setData(data.jobs);\r\n        }  else {\r\n            me.#loadAttr(data);\r\n        }\r\n    }\r\n    \r\n    #loadAttr(data) {\r\n        if (!data) return;\r\n        data = data['job-attributes'] ||data;\r\n        const list = Object.entries(data).map(t => { return {key: t[0], value : t[1]} } );\r\n        this.#attrStore.setData(list);\r\n    }\r\n\r\n    get #jobsTable() {\r\n        return this.query('#table-jobs');\r\n    }\r\n\r\n    get #jobsStore() {\r\n        return this.#jobsTable.store;\r\n    }\r\n\r\n    get #attrTable() {\r\n        return this.query('#table-job-attributes');\r\n    }\r\n\r\n    get #attrStore() {\r\n        return this.#attrTable.store;\r\n    }\r\n\r\n    cancelJob(e) {\r\n\r\n    }\r\n    \r\n    printUri(e) {\r\n\r\n    }\r\n\r\n    purgeJobs(e) {\r\n        this.#jobsStore.clear();\r\n    }\r\n\r\n    async details(e) {\r\n        const jobs = await Utils.load('./data/job-attributes.json');\r\n        this.load(jobs);\r\n    }\r\n\r\n    async refresh(e) {\r\n        const jobs = await Utils.load('./data/jobs.json');\r\n        this.load(jobs);\r\n    }\r\n}","/*\r\n* Copyright (C) 2015, 2023 Green Screens Ltd.\r\n*/\r\n\r\n/**\r\n * A module loading IPPView class\r\n * @module ipp/IPPView\r\n */\r\nimport Utils from './Utils.mjs';\r\nimport BaseView from './BaseView.mjs';\r\n\r\nexport default class IPPView extends BaseView {\r\n\r\n    static {\r\n        customElements.define('gs-ipp-view', IPPView);\r\n        Object.seal(IPPView);\r\n    }\r\n\r\n    async getTemplate() {\r\n        return super.getTemplate('//ipp-view.html');\r\n    }\r\n\r\n    get #attributes() {\r\n        return this.query('gs-ipp-attributes');\r\n    }\r\n\r\n    get #jobs() {\r\n        return this.query('gs-ipp-jobs');\r\n    }\r\n\r\n    get uri() {\r\n        return this.query('#printerURI')?.value || '';\r\n    }\r\n\r\n    async register() {\r\n        this.refresh();\r\n    }\r\n\r\n    async refresh() {\r\n        const me = this;\r\n        const data = await Utils.load('./data/printer-attributes.json');\r\n        me.#attributes.load(data);\r\n\r\n        const jobs = await Utils.load('./data/jobs.json');\r\n        me.#jobs.load(jobs);\r\n    }\r\n\r\n}","/*\r\n* Copyright (C) 2015, 2023 Green Screens Ltd.\r\n*/\r\n\r\n/**\r\n * A module loading IPPConsole class\r\n * \r\n * @module ipp/IPPConsole\r\n */\r\nimport { GSElement } from '/webcomponents/release/esm/io.greenscreens.components.all.esm.min.js';\r\n\r\n/**\r\n * IPPJobs UI lists printer jobs and allows job manupulation actions\r\n */\r\nexport default class IPPConsole extends GSElement {\r\n\r\n    static {\r\n        customElements.define('gs-ipp-console', IPPConsole);\r\n        Object.seal(IPPConsole);\r\n    }\r\n\r\n    async getTemplate() {\r\n        return super.getTemplate('//ipp-console.html');\r\n    }\r\n\r\n    log(data = '') {\r\n        this.#console.content = JSON.stringify(data, '', 4);\r\n    }\r\n\r\n    get #console() {\r\n        return this.query('gs-highlight');\r\n    }\r\n}","import './Utils.mjs';\r\nimport './BaseView.mjs';\r\nimport './IPPAttributes.mjs';\r\nimport './IPPJobs.mjs';\r\nimport './IPPView.mjs';\r\nimport './IPPConsole.mjs';\r\n\r\nimport { GSHighlight } from '/webcomponents/release/esm/io.greenscreens.extra.esm.min.js';\r\nglobalThis.GSHighlight = GSHighlight;"],"names":["Utils","notify","GSComponents","get","static","success","msg","info","danger","e","data","error","message","toString","inform","url","res","fetch","json","BaseView","GSElement","onReady","super","me","this","on","onAction","bind","async","detail","action","GSUtil","capitalizeAttr","fn","GSFunction","isFunction","isFunctionAsync","handleError","IPPAttributes","customElements","define","Object","seal","getTemplate","load","list","entries","map","t","key","value","store","setData","table","query","IPPJobs","attrStore","clear","jobs","jobsStore","loadAttr","jobsTable","attrTable","cancelJob","printUri","purgeJobs","IPPView","attributes","uri","refresh","IPPConsole","log","console","content","JSON","stringify","globalThis","GSHighlight"],"mappings":"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"}