class CacheEngine{#e;#t;constructor(e){this.#e=e||'DefaultCache'}get name(){return this.#e}get isInitialized(){return!!this.#t}async init(){return'caches'in self&&(this.#t=await caches.open(this.#e),!0)}addResourcesToCache(e){return this.#t.addAll(e)}putInCache(e,t){return this.#t.put(e,t)}getFromCache(e){return this.#t.match(e)}async fetchAndCache(e){const t=this,s=await fetch(e);return s.ok&&await t.putInCache(e,s.clone()),s}async cacheFirst(e){return await this.getFromCache(e)||this.fetchAndCache(e)}}class FilterEngine{#s=new Map;constructor(e){this.registerAll(e)}registerAll(e=[]){for(const t of e)'string'==typeof t.name&&'function'==typeof t.fn&&this.register(t.name,t.fn)}register(e,t){this.#s.has(e)||this.#s.set(e,t)}unregister(e){this.#s.has(e)&&this.#s.delete(e)}match(e){for(const[t,s]of this.#s.entries())if(s(e))return!0;return!1}}class WorkerEngine{#n=!1;#a=null;#i=null;#t=null;constructor(e){const t=this;t.#a=e||{},t.#n=e?.trace||!1,t.#i=new FilterEngine(e?.filters||[]),t.#t=new CacheEngine(e?.cacheName||'DefaultCache')}async start(){const e=this;await e.#t.init(),e.#t.isInitialized&&(self.addEventListener('install',e.#r.bind(e)),self.addEventListener('activate',e.#c.bind(e)),self.addEventListener('push',e.#h.bind(e)),self.addEventListener('sync',e.#o.bind(e)),self.addEventListener('fetch',e.#l.bind(e)),self.addEventListener('message',e.#d.bind(e)))}#r(e){const t=this;t.#n,t.#a?.precachedAssets&&e.waitUntil(t.#t.addResourcesToCache(t.#a.precachedAssets))}#c(e){return this.#n,self.clients.claim()}#h(e){this.#n}#o(e){this.#n}#l(e){const t=this;t.#n,t.#i.match(e.request)&&e.respondWith(t.#t.cacheFirst(e.request))}#f(e){this.#n&&e.target?.postMessage(`Hi client: ${e.data} from Service Worker Port2`)}#d(e){const t=this;if(!t.#u(e)){if(t.#g(e),'SKIP_WAITING'===e.data)return self.skipWaiting();t.#p(e)}}#u(e){return e.source===self.serviceWorker}#g(e){const t=this;'TRACE_ON'===e.data?t.#n=!0:'TRACE_OFF'===e.data&&(t.#n=!1),t.#n&&e.source?.postMessage(`Hi client: ${e.data} from Service Worker`)}#p(e){const t=this;if('INIT_PORT'===e.data&&e.ports[0])return t.#n,e.ports[0].onmessage=t.#f.bind(t),!0}}export{CacheEngine,FilterEngine,WorkerEngine};
//# sourceMappingURL=io.greenscreens.worker.all.min.js.map
